// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("STUDENT")
  isEmailVerified Boolean @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  exams Exam[]

  @@map("users")
}

model Exam {
  id          String   @id @default(cuid())
  title       String
  description String?
  timeLimit   Int?     // in minutes
  shareLink   String   @unique @default(cuid())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questions Question[]
  responses Response[]

  @@map("exams")
}

model Question {
  id       String @id @default(cuid())
  type     String // Changed from enum to String for SQLite compatibility
  question String
  options  String? // Changed from Json to String for SQLite compatibility
  correctAnswer String? // For auto-gradable questions
  points   Int         @default(1)
  order    Int

  // Relations
  examId  String
  exam    Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@map("questions")
}

model Response {
  id           String   @id @default(cuid())
  studentName  String?
  studentEmail String?
  score        Int?
  totalPoints  Int
  submittedAt  DateTime @default(now())

  // Relations
  examId  String
  exam    Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@map("responses")
}

model Answer {
  id     String @id @default(cuid())
  answer String

  // Relations
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  responseId String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@map("answers")
}
